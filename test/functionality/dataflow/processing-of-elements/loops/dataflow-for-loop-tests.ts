import { assertDataflow, withShell } from '../../../_helper/shell'
import { emptyGraph } from '../../../_helper/dataflow/dataflowgraph-builder'
import { argumentInCall, defaultEnv } from '../../../_helper/dataflow/environment-builder'
import { BuiltIn } from '../../../../../src/dataflow'
import { EmptyArgument } from '../../../../../src'

describe('for', withShell(shell => {
	assertDataflow('Single-vector for Loop',
		shell, 'for(i in 0) i',  emptyGraph()
			.use('2', 'i', { controlDependency: [] })
			.reads('2', '0')
			.argument('4', '2')
			.call('4', 'for', [argumentInCall('0'), argumentInCall('1'), argumentInCall('2', { controlDependency: [] })], { returns: [], reads: ['0', '1', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('i', '0', '4') })
			.argument('4', ['0', '1'])
			.nse('4', '2')
			.defineVariable('0', 'i', { definedBy: ['1'] })
			.constant('1')
	)

	describe('Potential redefinition with break', () => {
		assertDataflow('Potential redefinition inside the same loop',
			shell,
			`repeat {
  x <- 2
  if(z) break
  x <- 3
}
x`, emptyGraph()
				.use('5', 'z')
				.use('14', 'x')
				.reads('14', ['2', '9'])
				.call('4', '<-', [argumentInCall('2'), argumentInCall('3')], { returns: ['2'], reads: [BuiltIn] })
				.sameRead('4', '11')
				.call('6', 'break', [], { returns: [], reads: [BuiltIn], controlDependency: ['8'], environment: defaultEnv().defineVariable('x', '2', '4') })
				.call('8', 'if', [argumentInCall('5'), argumentInCall('6', { controlDependency: ['8'] }), EmptyArgument], { returns: ['6'], reads: [BuiltIn, '5'], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '2', '4') })
				.call('11', '<-', [argumentInCall('9', { controlDependency: [] }), argumentInCall('10')], { returns: ['9'], reads: [BuiltIn], controlDependency: [], environment: defaultEnv().defineVariable('x', '2', '4') })
				.call('12', '{', [argumentInCall('4'), argumentInCall('8'), argumentInCall('11', { controlDependency: [] })], { returns: ['11'], reads: [BuiltIn], environment: defaultEnv().defineVariable('x', '2', '4').defineVariable('x', '9', '11', []) })
				.call('13', 'repeat', [argumentInCall('12')], { returns: [], reads: [BuiltIn] })
				.nse('13', '12')
				.constant('3')
				.defineVariable('2', 'x', { definedBy: ['3', '4'] })
				.sameDef('2', '9')
				.constant('10')
				.defineVariable('9', 'x', { definedBy: ['10', '11'], controlDependency: [] })
		)
	})

	assertDataflow('Read in for Loop', shell, 'x <- 12\nfor(i in 1:10) x ', emptyGraph()
		.use('7', 'x', { controlDependency: [] })
		.reads('7', '0')
		.call('2', '<-', [argumentInCall('0'), argumentInCall('1')], { returns: ['0'], reads: [BuiltIn] })
		.call('6', ':', [argumentInCall('4'), argumentInCall('5')], { returns: [], reads: ['4', '5', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2') })
		.call('9', 'for', [argumentInCall('3'), argumentInCall('6'), argumentInCall('7', { controlDependency: [] })], { returns: [], reads: ['3', '6', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2').defineVariable('i', '3', '9') })
		.nse('9', '7')
		.constant('1')
		.defineVariable('0', 'x', { definedBy: ['1', '2'] })
		.defineVariable('3', 'i', { definedBy: ['6'] })
		.constant('4')
		.constant('5')
	)
	assertDataflow('Read after for loop', shell, 'for(i in 1:10) { x <- 12 }\n x', emptyGraph()
		.use('11', 'x')
		.reads('11', '6')
		.call('3', ':', [argumentInCall('1'), argumentInCall('2')], { returns: [], reads: ['1', '2', BuiltIn], onlyBuiltIn: true })
		.call('8', '<-', [argumentInCall('6', { controlDependency: [] }), argumentInCall('7', { controlDependency: ['10'] })], { returns: ['6'], reads: [BuiltIn], controlDependency: [] })
		.call('9', '{', [argumentInCall('8', { controlDependency: [] })], { returns: ['8'], reads: [BuiltIn], controlDependency: [] })
		.call('10', 'for', [argumentInCall('0'), argumentInCall('3'), argumentInCall('9', { controlDependency: [] })], { returns: [], reads: ['0', '3', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('i', '0', '10') })
		.nse('10', '9')
		.defineVariable('0', 'i', { definedBy: ['3'] })
		.constant('1')
		.constant('2')
		.constant('7', { controlDependency: ['10'] })
		.defineVariable('6', 'x', { definedBy: ['7', '8'], controlDependency: [] })
	)


	assertDataflow('Read after for loop with outer def', shell, 'x <- 9\nfor(i in 1:10) { x <- 12 }\n x',  emptyGraph()
		.use('14', 'x')
		.reads('14', ['0', '9'])
		.call('2', '<-', [argumentInCall('0'), argumentInCall('1')], { returns: ['0'], reads: [BuiltIn] })
		.sameRead('2', '11')
		.call('6', ':', [argumentInCall('4'), argumentInCall('5')], { returns: [], reads: ['4', '5', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2') })
		.call('11', '<-', [argumentInCall('9', { controlDependency: [] }), argumentInCall('10', { controlDependency: [] })], { returns: ['9'], reads: [BuiltIn], controlDependency: [] })
		.call('12', '{', [argumentInCall('11', { controlDependency: [] })], { returns: ['11'], reads: [BuiltIn], controlDependency: [] })
		.call('13', 'for', [argumentInCall('3'), argumentInCall('6'), argumentInCall('12', { controlDependency: [] })], { returns: [], reads: ['3', '6', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2', []).defineVariable('x', '9', '11', []).defineVariable('i', '3', '13') })
		.nse('13', '12')
		.constant('1')
		.defineVariable('0', 'x', { definedBy: ['1', '2'] })
		.sameDef('0', '9')
		.defineVariable('3', 'i', { definedBy: ['6'] })
		.constant('4')
		.constant('5')
		.constant('10', { controlDependency: ['13'] })
		.defineVariable('9', 'x', { definedBy: ['10', '11'], controlDependency: [] })
	)
	assertDataflow('redefinition within loop', shell, 'x <- 9\nfor(i in 1:10) { x <- x }\n x',  emptyGraph()
		.use('10', 'x', { controlDependency: [] })
		.reads('10', ['9', '0'])
		.use('14', 'x')
		.reads('14', ['0', '9'])
		.call('2', '<-', [argumentInCall('0'), argumentInCall('1')], { returns: ['0'], reads: [BuiltIn] })
		.sameRead('2', '11')
		.call('6', ':', [argumentInCall('4'), argumentInCall('5')], { returns: [], reads: ['4', '5', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2') })
		.call('11', '<-', [argumentInCall('9', { controlDependency: [] }), argumentInCall('10', { controlDependency: [] })], { returns: ['9'], reads: [BuiltIn], controlDependency: [] })
		.call('12', '{', [argumentInCall('11', { controlDependency: [] })], { returns: ['11'], reads: [BuiltIn], controlDependency: [] })
		.call('13', 'for', [argumentInCall('3'), argumentInCall('6'), argumentInCall('12', { controlDependency: [] })], { returns: [], reads: ['3', '6', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2', []).defineVariable('x', '9', '11', []).defineVariable('i', '3', '13') })
		.nse('13', '12')
		.constant('1')
		.defineVariable('0', 'x', { definedBy: ['1', '2'] })
		.sameDef('0', '9')
		.defineVariable('3', 'i', { definedBy: ['6'] })
		.constant('4')
		.constant('5')
		.defineVariable('9', 'x', { definedBy: ['10', '11'], controlDependency: [] })
	)

	assertDataflow('double redefinition within loop', shell, 'x <- 9\nfor(i in 1:10) { x <- x; x <- x }\n x', emptyGraph()
		.use('10', 'x', { controlDependency: [] })
		.reads('10', ['12', '0'])
		.use('13', 'x', { controlDependency: ['16'] })
		.reads('13', '9')
		.use('17', 'x')
		.reads('17', ['0', '9', '12'])
		.call('2', '<-', [argumentInCall('0'), argumentInCall('1')], { returns: ['0'], reads: [BuiltIn] })
		.sameRead('2', ['11', '14'])
		.call('6', ':', [argumentInCall('4'), argumentInCall('5')], { returns: [], reads: ['4', '5', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2') })
		.call('11', '<-', [argumentInCall('9', { controlDependency: [] }), argumentInCall('10', { controlDependency: [] })], { returns: ['9'], reads: [BuiltIn], controlDependency: [] })
		.sameRead('11', '14')
		.call('14', '<-', [argumentInCall('12', { controlDependency: [] }), argumentInCall('13', { controlDependency: ['16'] })], { returns: ['12'], reads: [BuiltIn], controlDependency: [], environment: defaultEnv().defineVariable('x', '9', '11', ['16']) })
		.call('15', '{', [argumentInCall('11', { controlDependency: [] }), argumentInCall('14', { controlDependency: [] })], { returns: ['14'], reads: [BuiltIn], controlDependency: [], environment: defaultEnv().defineVariable('x', '9', '11', ['16']) })
		.call('16', 'for', [argumentInCall('3'), argumentInCall('6'), argumentInCall('15', { controlDependency: [] })], { returns: [], reads: ['3', '6', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('x', '0', '2', []).defineVariable('x', '9', '11', []).defineVariable('x', '12', '14', []).defineVariable('i', '3', '16') })
		.nse('16', '15')
		.constant('1')
		.defineVariable('0', 'x', { definedBy: ['1', '2'] })
		.sameDef('0', ['9', '12'])
		.defineVariable('3', 'i', { definedBy: ['6'] })
		.constant('4')
		.constant('5')
		.defineVariable('9', 'x', { definedBy: ['10', '11'], controlDependency: [] })
		.sameDef('9', '12')
		.defineVariable('12', 'x', { definedBy: ['13', '14'], controlDependency: [] })
	)

	assertDataflow('loop-variable redefined within loop', shell, 'for(i in 1:10) { i; i <- 12 }\n i', emptyGraph()
		.use('6', 'i', { controlDependency: [] })
		.reads('6', '0')
		.use('12', 'i')
		.reads('12', ['0', '7'])
		.call('3', ':', [argumentInCall('1'), argumentInCall('2')], { returns: [], reads: ['1', '2', BuiltIn], onlyBuiltIn: true })
		.call('9', '<-', [argumentInCall('7', { controlDependency: [] }), argumentInCall('8', { controlDependency: [] })], { returns: ['7'], reads: [BuiltIn], controlDependency: [] })
		.call('10', '{', [argumentInCall('6', { controlDependency: [] }), argumentInCall('9', { controlDependency: [] })], { returns: ['9'], reads: [BuiltIn], controlDependency: [] })
		.call('11', 'for', [argumentInCall('0'), argumentInCall('3'), argumentInCall('10', { controlDependency: [] })], { returns: [], reads: ['0', '3', BuiltIn], onlyBuiltIn: true, environment: defaultEnv().defineVariable('i', '0', '11', []).defineVariable('i', '7', '9', []) })
		.nse('11', '10')
		.defineVariable('0', 'i', { definedBy: ['3'] })
		.constant('1')
		.constant('2')
		.constant('8', { controlDependency: ['11'] })
		.defineVariable('7', 'i', { definedBy: ['8', '9'], controlDependency: [] })
	)
}))
